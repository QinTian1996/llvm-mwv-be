//===-- Mwv208ISelDAGToDAG.cpp - A dag to dag inst selector for Mwv208
//------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MWV208 target.
//
//===----------------------------------------------------------------------===//

#include "Mwv208TargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/ErrorHandling.h"
using namespace llvm;

#define DEBUG_TYPE "mwv208-isel"
#define PASS_NAME "MWV208 DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// Mwv208DAGToDAGISel - MWV208 specific code to select MWV208 machine
/// instructions for SelectionDAG operations.
///
namespace {
class Mwv208DAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the Mwv208 Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const Mwv208Subtarget *Subtarget = nullptr;

public:
  Mwv208DAGToDAGISel() = delete;

  explicit Mwv208DAGToDAGISel(Mwv208TargetMachine &tm) : SelectionDAGISel(tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<Mwv208Subtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  // Include the pieces autogenerated from the target description.
#include "Mwv208GenDAGISel.inc"

private:
};

class Mwv208DAGToDAGISelLegacy : public SelectionDAGISelLegacy {
public:
  static char ID;
  explicit Mwv208DAGToDAGISelLegacy(Mwv208TargetMachine &tm)
      : SelectionDAGISelLegacy(ID, std::make_unique<Mwv208DAGToDAGISel>(tm)) {}
};
} // end anonymous namespace

char Mwv208DAGToDAGISelLegacy::ID = 0;

INITIALIZE_PASS(Mwv208DAGToDAGISelLegacy, DEBUG_TYPE, PASS_NAME, false, false)

void Mwv208DAGToDAGISel::Select(SDNode *N) {
  SDLoc dl(N);
  if (N->isMachineOpcode()) {
    N->setNodeId(-1);
    return; // Already selected.
  }

  switch (N->getOpcode()) {
  default:
    break;
  case ISD::ADD:
    // TODO
    break;
  }

  SelectCode(N);
}

/// createMwv208ISelDag - This pass converts a legalized DAG into a
/// MWV208-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createMwv208ISelDag(Mwv208TargetMachine &TM) {
  return new Mwv208DAGToDAGISelLegacy(TM);
}
